import { requestHandler, notificationHandler } from "hediet-remoting";

export function createCommitment(secret: string) {
	return secret;
}

export function generateSecret(): string {
	return Math.random().toString();
}

export function checkSecret(secret: string, commitment: string) {
	return secret === commitment;
}

export function determineWinner(secrets: string[]): 1|2 {
	const sum = secrets.map(parseFloat).reduce((p, c) => p + c, 0);
	if (sum % 1 >= 0.5) 
		return 1;
	else
		return 2;
}

export interface Bet {
	betId: string;
	player1Commitment: string;
	serverCommitment: string;
	createdBy: string;
}

export interface FinishedBet extends Bet {
	serverSecret: string;
	player1Secret: string;
	player2Secret: string;
	winningPlayer: 1|2;
}

export abstract class ClientInterface {
	@requestHandler()
	public player1GetSecret(player2Secret: string, serverSecret: string): PromiseLike<string> { throw "not implemented"; }

	@notificationHandler()
	public onFinishedCurrentBet(bet: FinishedBet) {}

	@notificationHandler()
	public onNewBet(bet: Bet) {}

	@notificationHandler()
	public onDeleteBet(betId: string) {}
}

export abstract class ServerInterface {
	@requestHandler()
	public login(username: string): PromiseLike<void> { throw "not implemented"; };

	@requestHandler()
	public createBetAsPlayer1(value: number, randomCommitment: string): PromiseLike<{ betId: string }> { throw "not implemented"; }

	@requestHandler()
	public getBets(): PromiseLike<Bet[]> { throw "not implemented"; }

	@requestHandler()
	public joinBetAsPlayer2(betId: string, secret: string): PromiseLike<void> { throw "not implemented"; }
}

